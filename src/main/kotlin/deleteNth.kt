import org.junit.Assert.assertArrayEquals

fun deleteNth(elements:IntArray, maxOcurrences:Int):IntArray {
        val cleanedList = mutableListOf<Int>()
        val occurenceMap = mutableMapOf<Int, Int>()
        var count: Int
        if (elements.isNotEmpty() && maxOcurrences != 0) {
                for(i in elements) {
                        if(occurenceMap.containsKey(i) && occurenceMap.getValue(i) < maxOcurrences) {
                                cleanedList.add(i)
                                // current count
                                count = occurenceMap.getValue(i)
                                occurenceMap[i] = count+1
                        } else if(!occurenceMap.containsKey(i)){
                                cleanedList.add(i)
                                occurenceMap[i] = 1
                        }
                }
                return cleanedList.toIntArray()
        } else {
                return intArrayOf()
        }

}
fun main () {
        deleteNth(intArrayOf(1, 1, 2, 3, 4, 5, 6, 2),1)

        assertArrayEquals(intArrayOf(20, 37, 21),
                deleteNth(intArrayOf(20, 37, 20, 21), 1)
        )
        assertArrayEquals(
                intArrayOf(1, 1, 3, 3, 7, 2, 2, 2),
                deleteNth(intArrayOf(1, 1, 3, 3, 7, 2, 2, 2, 2), 3)
        )
        assertArrayEquals(
                intArrayOf(1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5),
                deleteNth(intArrayOf(1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1), 3)
        )
        assertArrayEquals(
                intArrayOf(1, 1, 1, 1, 1),
                deleteNth(intArrayOf(1, 1, 1, 1, 1), 5)
        )
        assertArrayEquals(
                intArrayOf(),
                deleteNth(intArrayOf(), 5)
        )
        assertArrayEquals(
                intArrayOf(1, 2, 3, 4, 5),
                deleteNth(intArrayOf(1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1,
                        2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1,
                        1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2,
                        3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1,
                        2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2
                        , 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2,
                        3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3,
                        1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1,
                        2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1,
                        2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3,
                        2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5,
                        3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2,
                        3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1,
                        2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2,
                        3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2,
                        4, 5, 3, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1), 1)
        )
}
